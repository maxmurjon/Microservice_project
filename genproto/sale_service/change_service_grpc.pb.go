// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: change_service.proto

package sale_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChangeServiceClient is the client API for ChangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangeServiceClient interface {
	Create(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*Change, error)
	Get(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Change, error)
	GetList(ctx context.Context, in *GetListChangeRequest, opts ...grpc.CallOption) (*GetChangesListResponse, error)
	Update(ctx context.Context, in *UpdateChangeRequest, opts ...grpc.CallOption) (*Change, error)
	PatchUpdate(ctx context.Context, in *PatchUpdateRequest, opts ...grpc.CallOption) (*Change, error)
	Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type changeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChangeServiceClient(cc grpc.ClientConnInterface) ChangeServiceClient {
	return &changeServiceClient{cc}
}

func (c *changeServiceClient) Create(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/sale_service.ChangeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeServiceClient) Get(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/sale_service.ChangeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeServiceClient) GetList(ctx context.Context, in *GetListChangeRequest, opts ...grpc.CallOption) (*GetChangesListResponse, error) {
	out := new(GetChangesListResponse)
	err := c.cc.Invoke(ctx, "/sale_service.ChangeService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeServiceClient) Update(ctx context.Context, in *UpdateChangeRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/sale_service.ChangeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeServiceClient) PatchUpdate(ctx context.Context, in *PatchUpdateRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/sale_service.ChangeService/PatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeServiceClient) Delete(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/sale_service.ChangeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangeServiceServer is the server API for ChangeService service.
// All implementations must embed UnimplementedChangeServiceServer
// for forward compatibility
type ChangeServiceServer interface {
	Create(context.Context, *CreateChangeRequest) (*Change, error)
	Get(context.Context, *PrimaryKey) (*Change, error)
	GetList(context.Context, *GetListChangeRequest) (*GetChangesListResponse, error)
	Update(context.Context, *UpdateChangeRequest) (*Change, error)
	PatchUpdate(context.Context, *PatchUpdateRequest) (*Change, error)
	Delete(context.Context, *PrimaryKey) (*empty.Empty, error)
	mustEmbedUnimplementedChangeServiceServer()
}

// UnimplementedChangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChangeServiceServer struct {
}

func (UnimplementedChangeServiceServer) Create(context.Context, *CreateChangeRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChangeServiceServer) Get(context.Context, *PrimaryKey) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedChangeServiceServer) GetList(context.Context, *GetListChangeRequest) (*GetChangesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedChangeServiceServer) Update(context.Context, *UpdateChangeRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChangeServiceServer) PatchUpdate(context.Context, *PatchUpdateRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUpdate not implemented")
}
func (UnimplementedChangeServiceServer) Delete(context.Context, *PrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChangeServiceServer) mustEmbedUnimplementedChangeServiceServer() {}

// UnsafeChangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangeServiceServer will
// result in compilation errors.
type UnsafeChangeServiceServer interface {
	mustEmbedUnimplementedChangeServiceServer()
}

func RegisterChangeServiceServer(s grpc.ServiceRegistrar, srv ChangeServiceServer) {
	s.RegisterService(&ChangeService_ServiceDesc, srv)
}

func _ChangeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.ChangeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeServiceServer).Create(ctx, req.(*CreateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.ChangeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeServiceServer).Get(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.ChangeService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeServiceServer).GetList(ctx, req.(*GetListChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.ChangeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeServiceServer).Update(ctx, req.(*UpdateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeService_PatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeServiceServer).PatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.ChangeService/PatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeServiceServer).PatchUpdate(ctx, req.(*PatchUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.ChangeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeServiceServer).Delete(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangeService_ServiceDesc is the grpc.ServiceDesc for ChangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale_service.ChangeService",
	HandlerType: (*ChangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChangeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ChangeService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ChangeService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ChangeService_Update_Handler,
		},
		{
			MethodName: "PatchUpdate",
			Handler:    _ChangeService_PatchUpdate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChangeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "change_service.proto",
}
